USE BookMyShowDB;
GO

CREATE OR ALTER PROCEDURE spc_deleteShow
    @Time nvarchar(50),
    @TheatreId int,
    @MovieId int,
    @Result int OUTPUT
AS 
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        -- Update the Seat table
        UPDATE Seat
        SET
            ShowTime = NULL,
            MovieId = NULL,
            TicketId = NULL,
            Availability = CASE WHEN Availability = 'Booked' THEN 'Available' ELSE Availability END
        WHERE ShowTime = @Time AND TheatreId = @TheatreId AND MovieId = @MovieId;

        -- Delete from Ticket table
        DELETE FROM Ticket
        WHERE ShowTime = @Time AND TheatreId = @TheatreId AND MovieId = @MovieId;

        -- Delete from Show table
        DELETE FROM Show
        WHERE Time = @Time AND TheatreId = @TheatreId AND MovieId = @MovieId;

        -- Set @Result based on whether the show record was deleted
        IF @@ROWCOUNT > 0
        BEGIN
            SET @Result = 1;
        END
        ELSE
        BEGIN
            SET @Result = 0;
        END;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        -- Return error
        SET @Result = -1;
    END CATCH;
END;
GO

This is an example of Stored Procedure logic that I have to implement, AFTER Delete FROM Show is performed it should Delete A movie record on the basis of Movie table's Id. Create a new stored Procedure WHICH will take movie's Id input and first get all the details with the following JOIN Query

SELECT S.Time, S.TheatreId
FROM Show AS S
INNER JOIN Movie AS M
ON M.Id = S.MovieId
WHERE M.Id = @Id;

Here @Id would be the input parameter of the newly created stored procedure. It should be able to EXEC spc_deleteShow @Time, @TheatreId, @MovieId MULTIPLE TIMES AS THE join query above will return multiple rows. with required @Time and @TheatreId. Finally it should have Output parameter @Result int same logic used in the above example of spc_deleteShow.

