var sqlQuery = @"SELECT DISTINCT S.MovieId
FROM Show AS S
INNER JOIN Movie as M
ON M.Id = S.MovieId
WHERE M.Name = @MovieName";
return _db.Query<Show>(sqlQuery, new { @MovieName = showNames.MovieNames }).ToList();

Instead of returning, I want to save the fetched output in a variable, here showNames is an object of model ShowNames which has properties (all strings: Show, MovieName, TheatreName), 
I think we are using dapper here.

=========================================

var sqlQuery = @"SELECT DISTINCT S.MovieId
FROM Show AS S
INNER JOIN Movie as M
ON M.Id = S.MovieId
WHERE M.Name = @MovieName";

// Execute the query and save the result in a variable
var movieIds = _db.Query<int>(sqlQuery, new { @MovieName = showNames.MovieName }).ToList();

// Now you can use the movieIds variable as needed

===========================================================================

SELECT S.Time, T.Name, M.Name
FROM Show as S
INNER JOIN Movie as M
ON S.MovieId = M.Id
INNER JOIN Theatre as T
ON S.TheatreId = T.Id
WHERE S.TheatreId=4 AND S.MovieId=4

============================================================================

public async Task<List<ShowNames>> Get(int movieId, int theatreId)
    {
        var sqlQuery = @"
            SELECT S.Time, T.Name AS TheatreName, M.Name AS MovieName
            FROM Show AS S
            INNER JOIN Movie AS M ON S.MovieId = M.Id
            INNER JOIN Theatre AS T ON S.TheatreId = T.Id
            WHERE S.TheatreId = @TheatreId AND S.MovieId = @MovieId";

        var parameters = new { TheatreId = theatreId, MovieId = movieId };

        var result = await _db.QueryAsync<ShowNames>(sqlQuery, parameters);
        return result.ToList();
    }

===============================================================================

