SELECT * 
FROM Movie AS M
INNER JOIN Show AS S
ON S.MovieId = M.Id


----------------------------



Update the above component and html in angular

To show Drop-down instead of input type MovieId and TheatreId

in the drop-down Movie Name and Theatre Name should come and upon their selection the list should be generated.
While Listing the Shows Only THOSE MOVIE AND THEATRE SHOULD BE DISPLAYED IN THE DROPDOWN, which are already Present in the SHOW table

AND WHILE ADDING THE SHOWS, ALL MOVIES AND ALL THEATRE SHOULD DISPLAY IN THE DROPDOWN.

Below I am providing the services for theatre and movies,  

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
@Injectable({
  providedIn: 'root'
})
export class MovieService {
 // private apiUrl = `${environemnt.apiUrl}/movie`;
 
  constructor(private http: HttpClient) { }
  apiUrl="https://localhost:44353/api/Movie/"
 
  getMovies(): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}`);
  }
 
  getMovie(id: number): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}/${id}`);
  }
 
  addMovie(movie: any): Observable<any> {
    //return this.http.post<any>(`${this.apiUrl}`, movie);
    return this.http.post<any>(`${this.apiUrl}`+"PostMovie",movie)
  }
 
  editMovie(movie: any): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}` +"UpdateMovie", movie);
  }
 
  deleteMovie(id: number): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}${id}`);
  }
 
  uploadImage(formData : FormData){
    return this.http.post(`${this.apiUrl}` + "upload-image",formData);
  }
}

now the second one 

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
 
@Injectable({
  providedIn: 'root'
})
export class TheatreService {
  apiUrl = `${environment.apiUrl}/theatre`; // Make sure the environment variable is set correctly
 
  constructor(private http: HttpClient) { }
 
  getTheatres(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl);
  }
 
  getTheatre(id: number): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}/id/${id}`);
  }
 
  getTheatresByCity(city: string): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/city/${city}`);
  }
 
  addTheatre(theatre: any): Observable<any> {
    return this.http.post<any>(this.apiUrl, theatre);
  }
 
  editTheatre(theatre: any): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}`, theatre);
  }
 
  deleteTheatre(id: number): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}/${id}`);
  }
}
 -------------------

To implement the required changes, we will update the Angular component and template to use dropdowns for selecting Movie and Theatre. We will also update the component logic to fetch and display the necessary data. Here are the updates:

### show.component.ts
```typescript
import { Component, OnInit } from '@angular/core';
import { ShowService } from '../services/show.service'; // Update the path as necessary
import { MovieService } from '../services/movie.service'; // Update the path as necessary
import { TheatreService } from '../services/theatre.service'; // Update the path as necessary
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-show',
  templateUrl: './show.component.html',
  styleUrls: ['./show.component.css']
})
export class ShowComponent implements OnInit {
  shows: any[] = [];
  movies: any[] = [];
  theatres: any[] = [];
  selectedMovieId: number | null = null;
  selectedTheatreId: number | null = null;
  selectedShow: any = {};

  constructor(
    private showService: ShowService,
    private movieService: MovieService,
    private theatreService: TheatreService,
    private modalService: NgbModal
  ) {}

  ngOnInit(): void {
    this.loadMoviesAndTheatres();
  }

  loadMoviesAndTheatres(): void {
    this.movieService.getMovies().subscribe(
      (data) => {
        this.movies = data;
      },
      (error) => {
        console.error('Error fetching movies:', error);
      }
    );

    this.theatreService.getTheatres().subscribe(
      (data) => {
        this.theatres = data;
      },
      (error) => {
        console.error('Error fetching theatres:', error);
      }
    );
  }

  searchShows(searchForm: NgForm): void {
    const { movieId, theatreId } = searchForm.value;
    this.showService.getShowsbyMovieAndTheatre(movieId, theatreId).subscribe(
      (data) => {
        this.shows = data;
      },
      (error) => {
        console.error('Error fetching shows:', error);
      }
    );
  }

  deleteShow(show: any): void {
    this.showService.deleteShow(show).subscribe(
      (result) => {
        console.log(result);
        this.searchShows({ value: { movieId: show.movieId, theatreId: show.theatreId } } as NgForm); // Refresh the list after deletion
      },
      (error) => {
        console.error('Error deleting show:', error);
      }
    );
  }

  openAddShowModal(content: any): void {
    this.selectedShow = {};
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  addShow(addShowForm: NgForm): void {
    const newShow = addShowForm.value;
    this.showService.addShow(newShow).subscribe(
      (result) => {
        console.log(result);
        this.modalService.dismissAll();
        this.searchShows({ value: { movieId: newShow.movieId, theatreId: newShow.theatreId } } as NgForm); // Refresh the list after adding
      },
      (error) => {
        console.error('Error adding show:', error);
      }
    );
  }
}
```

### show.component.html
```html
<div class="search-container">
  <h2>Search Shows</h2>
  <form #searchForm="ngForm" (ngSubmit)="searchShows(searchForm)">
    <label for="movieId">Movie:</label>
    <select id="movieId" name="movieId" ngModel required>
      <option *ngFor="let movie of movies" [value]="movie.id">{{ movie.name }}</option>
    </select>

    <label for="theatreId">Theatre:</label>
    <select id="theatreId" name="theatreId" ngModel required>
      <option *ngFor="let theatre of theatres" [value]="theatre.id">{{ theatre.name }}</option>
    </select>
    
    <button type="submit" [disabled]="!searchForm.valid">Search</button>
  </form>
</div>

<div class="add-show-container">
  <button (click)="openAddShowModal(addShowModal)">Add Show</button>
</div>

<div class="show-list-container">
  <h2>List of Shows</h2>
  <ul>
    <li *ngFor="let show of shows">
      Time: {{ show.time }}, Movie: {{ movies.find(movie => movie.id === show.movieId)?.name }}, Theatre: {{ theatres.find(theatre => theatre.id === show.theatreId)?.name }}
      <button (click)="deleteShow(show)">Delete</button>
    </li>
  </ul>
</div>

<ng-template #addShowModal let-modal>
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Add Show</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="modal.dismiss('Cross click')"></button>
  </div>
  <div class="modal-body">
    <form #addShowForm="ngForm" (ngSubmit)="addShow(addShowForm)">
      <div class="form-group">
        <label for="time">Time:</label>
        <input id="time" name="time" ngModel type="text" required class="form-control" />
      </div>
      <div class="form-group">
        <label for="movieId">Movie:</label>
        <select id="movieId" name="movieId" ngModel required class="form-control">
          <option *ngFor="let movie of movies" [value]="movie.id">{{ movie.name }}</option>
        </select>
      </div>
      <div class="form-group">
        <label for="theatreId">Theatre:</label>
        <select id="theatreId" name="theatreId" ngModel required class="form-control">
          <option *ngFor="let theatre of theatres" [value]="theatre.id">{{ theatre.name }}</option>
        </select>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" (click)="modal.dismiss('cancel click')">Cancel</button>
        <button type="submit" class="btn btn-primary" [disabled]="!addShowForm.valid">Add Show</button>
      </div>
    </form>
  </div>
</ng-template>
```

### show.component.css
```css
.search-container, .add-show-container, .show-list-container {
  margin-bottom: 20px;
}

label {
  display: block;
  margin: 5px 0;
}

select, input {
  margin-bottom: 10px;
}

button {
  margin-top: 10px;
}

ul {
  list-style-type: none;
}

li {
  margin-bottom: 10px;
}

.modal-header, .modal-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
```

### app.module.ts
Ensure you import the necessary modules and register your component and service in the app module:

```typescript
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';

import { AppComponent } from './app.component';
import { ShowComponent } from './show/show.component';
import { ShowService } from './services/show.service'; // Update the path as necessary
import { MovieService } from './services/movie.service'; // Update the path as necessary
import { TheatreService } from './services/theatre.service'; // Update the path as necessary

@NgModule({
  declarations: [
    AppComponent,
    ShowComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    FormsModule,
    NgbModule
  ],
  providers: [ShowService, MovieService, TheatreService],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

### Dependencies
Make sure you have `ng-bootstrap` installed. You can install it using the following command:

```sh
ng add @ng-bootstrap/ng-bootstrap
```

This setup will allow you to search for shows based on selected Movie and Theatre from the dropdowns, add new shows using a modal form, and delete existing shows.

--------------------------------------

The error you are encountering, "Parser Error Bindings cannot contain assignments," occurs when Angular's template parser encounters an assignment within a binding expression. In this case, the problem could stem from using curly braces (`{}`) incorrectly within the template. Here's the updated `show.component.html` with corrections:

### show.component.html
```html
<div class="search-container">
  <h2>Search Shows</h2>
  <form #searchForm="ngForm" (ngSubmit)="searchShows(searchForm)">
    <div>
      <label for="movieId">Movie:</label>
      <select id="movieId" name="movieId" ngModel required>
        <option *ngFor="let movie of movies" [value]="movie.id">{{ movie.name }}</option>
      </select>
    </div>

    <div>
      <label for="theatreId">Theatre:</label>
      <select id="theatreId" name="theatreId" ngModel required>
        <option *ngFor="let theatre of theatres" [value]="theatre.id">{{ theatre.name }}</option>
      </select>
    </div>
    
    <button type="submit" [disabled]="!searchForm.valid">Search</button>
  </form>
</div>

<div class="add-show-container">
  <button (click)="openAddShowModal(addShowModal)">Add Show</button>
</div>

<div class="show-list-container">
  <h2>List of Shows</h2>
  <ul>
    <li *ngFor="let show of shows">
      Time: {{ show.time }}, 
      Movie: {{ movies.find(movie => movie.id === show.movieId)?.name }}, 
      Theatre: {{ theatres.find(theatre => theatre.id === show.theatreId)?.name }}
      <button (click)="deleteShow(show)">Delete</button>
    </li>
  </ul>
</div>

<ng-template #addShowModal let-modal>
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Add Show</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="modal.dismiss('Cross click')"></button>
  </div>
  <div class="modal-body">
    <form #addShowForm="ngForm" (ngSubmit)="addShow(addShowForm)">
      <div class="form-group">
        <label for="time">Time:</label>
        <input id="time" name="time" ngModel type="text" required class="form-control" />
      </div>
      <div class="form-group">
        <label for="movieId">Movie:</label>
        <select id="movieId" name="movieId" ngModel required class="form-control">
          <option *ngFor="let movie of movies" [value]="movie.id">{{ movie.name }}</option>
        </select>
      </div>
      <div class="form-group">
        <label for="theatreId">Theatre:</label>
        <select id="theatreId" name="theatreId" ngModel required class="form-control">
          <option *ngFor="let theatre of theatres" [value]="theatre.id">{{ theatre.name }}</option>
        </select>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" (click)="modal.dismiss('cancel click')">Cancel</button>
        <button type="submit" class="btn btn-primary" [disabled]="!addShowForm.valid">Add Show</button>
      </div>
    </form>
  </div>
</ng-template>
```

### Notes:
- The `ng-template` for the modal has `let-modal` which provides a reference to the modal instance, allowing it to be dismissed correctly.
- All binding expressions use the correct Angular syntax.

### show.component.ts (for completeness)
```typescript
import { Component, OnInit } from '@angular/core';
import { ShowService } from '../services/show.service'; // Update the path as necessary
import { MovieService } from '../services/movie.service'; // Update the path as necessary
import { TheatreService } from '../services/theatre.service'; // Update the path as necessary
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-show',
  templateUrl: './show.component.html',
  styleUrls: ['./show.component.css']
})
export class ShowComponent implements OnInit {
  shows: any[] = [];
  movies: any[] = [];
  theatres: any[] = [];
  selectedMovieId: number | null = null;
  selectedTheatreId: number | null = null;
  selectedShow: any = {};

  constructor(
    private showService: ShowService,
    private movieService: MovieService,
    private theatreService: TheatreService,
    private modalService: NgbModal
  ) {}

  ngOnInit(): void {
    this.loadMoviesAndTheatres();
  }

  loadMoviesAndTheatres(): void {
    this.movieService.getMovies().subscribe(
      (data) => {
        this.movies = data;
      },
      (error) => {
        console.error('Error fetching movies:', error);
      }
    );

    this.theatreService.getTheatres().subscribe(
      (data) => {
        this.theatres = data;
      },
      (error) => {
        console.error('Error fetching theatres:', error);
      }
    );
  }

  searchShows(searchForm: NgForm): void {
    const { movieId, theatreId } = searchForm.value;
    this.showService.getShowsbyMovieAndTheatre(movieId, theatreId).subscribe(
      (data) => {
        this.shows = data;
      },
      (error) => {
        console.error('Error fetching shows:', error);
      }
    );
  }

  deleteShow(show: any): void {
    this.showService.deleteShow(show).subscribe(
      (result) => {
        console.log(result);
        this.searchShows({ value: { movieId: show.movieId, theatreId: show.theatreId } } as NgForm); // Refresh the list after deletion
      },
      (error) => {
        console.error('Error deleting show:', error);
      }
    );
  }

  openAddShowModal(content: any): void {
    this.selectedShow = {};
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  addShow(addShowForm: NgForm): void {
    const newShow = addShowForm.value;
    this.showService.addShow(newShow).subscribe(
      (result) => {
        console.log(result);
        this.modalService.dismissAll();
        this.searchShows({ value: { movieId: newShow.movieId, theatreId: newShow.theatreId } } as NgForm); // Refresh the list after adding
      },
      (error) => {
        console.error('Error adding show:', error);
      }
    );
  }
}
```

### Additional Notes:
- Ensure that you have the necessary services (`ShowService`, `MovieService`, and `TheatreService`) configured correctly with appropriate API endpoints.
- Ensure that the HTML structure aligns with Angular’s template syntax.
- The dropdowns are populated with movie and theatre data as fetched from their respective services.
- The component handles searching, adding, and deleting shows, and it uses `NgbModal` for modal dialogs.

With these changes, the component should work correctly, displaying the list of shows based on the selected movie and theatre from the dropdowns, and allowing for adding and deleting shows.

NEW -----------------------------------

The error code 415 indicates that the server is rejecting the request because it doesn't support the format of the payload sent by the client. This typically occurs when the `Content-Type` header is not set correctly, or the server is expecting a different format.

In Angular's `HttpClient`, the `delete` method does not support sending a body by default. Instead, you should pass the parameters in the URL or use a different approach.

Here's how you can adjust the code to handle deletion correctly:

### Update `show.service.ts`
Modify the `deleteShow` method to include the parameters in the URL instead of passing a body:

```typescript
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ShowService {

  constructor(private http: HttpClient) { }
  apiUrl = "https://localhost:44353/api/Show";

  getShowsbyMovieId(movieId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/movie/${movieId}`);
  }

  getShowsbyTheatreId(theatreId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/theatre/${theatreId}`);
  }

  getShowsbyMovieAndTheatre(movieId: number, theatreId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/movie/${movieId}/theatre/${theatreId}`);
  }

  addShow(show: any): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}`, show);
  }

  deleteShow(time: string, movieId: number, theatreId: number): Observable<any> {
    const params = new HttpParams()
      .set('Time', time)
      .set('MovieId', movieId.toString())
      .set('TheatreId', theatreId.toString());

    return this.http.delete<any>(`${this.apiUrl}`, { params });
  }
}
```

### Update `show.component.ts`
Modify the `deleteShow` method in the component to call the updated service method correctly:

```typescript
import { Component, OnInit } from '@angular/core';
import { ShowService } from '../services/show.service'; // Update the path as necessary
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-show',
  templateUrl: './show.component.html',
  styleUrls: ['./show.component.css']
})
export class ShowComponent implements OnInit {
  shows: any[] = [];
  selectedShow: any = {};

  constructor(private showService: ShowService, private modalService: NgbModal) {}

  ngOnInit(): void {}

  searchShows(searchForm: NgForm): void {
    const { movieId, theatreId } = searchForm.value;
    this.showService.getShowsbyMovieAndTheatre(movieId, theatreId).subscribe(
      (data) => {
        this.shows = data;
      },
      (error) => {
        console.error('Error fetching shows:', error);
      }
    );
  }

  deleteShow(show: any): void {
    this.showService.deleteShow(show.time, show.movieId, show.theatreId).subscribe(
      (result) => {
        console.log(result);
        this.searchShows({ value: { movieId: show.movieId, theatreId: show.theatreId } } as NgForm); // Refresh the list after deletion
      },
      (error) => {
        console.error('Error deleting show:', error);
      }
    );
  }

  openAddShowModal(content: any): void {
    this.selectedShow = {};
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  addShow(addShowForm: NgForm): void {
    const newShow = addShowForm.value;
    this.showService.addShow(newShow).subscribe(
      (result) => {
        console.log(result);
        this.modalService.dismissAll();
        this.searchShows({ value: { movieId: newShow.movieId, theatreId: newShow.theatreId } } as NgForm); // Refresh the list after adding
      },
      (error) => {
        console.error('Error adding show:', error);
      }
    );
  }
}
```

### Update `show.component.html`
No changes are needed here for the HTML as it remains the same. The structure should still correctly bind to the methods in your component:

```html
<div class="search-container">
  <h2>Search Shows</h2>
  <form #searchForm="ngForm" (ngSubmit)="searchShows(searchForm)">
    <label for="movieId">Movie ID:</label>
    <input id="movieId" name="movieId" ngModel type="text" required />
    
    <label for="theatreId">Theatre ID:</label>
    <input id="theatreId" name="theatreId" ngModel type="text" required />
    
    <button type="submit" [disabled]="!searchForm.valid">Search</button>
  </form>
</div>

<div class="add-show-container">
  <button (click)="openAddShowModal(addShowModal)">Add Show</button>
</div>

<div class="show-list-container">
  <h2>List of Shows</h2>
  <ul>
    <li *ngFor="let show of shows">
      Time: {{ show.time }}, Movie ID: {{ show.movieId }}, Theatre ID: {{ show.theatreId }}
      <button (click)="deleteShow(show)">Delete</button>
    </li>
  </ul>
</div>

<ng-template #addShowModal let-modal>
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Add Show</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="modal.dismiss('Cross click')"></button>
  </div>
  <div class="modal-body">
    <form #addShowForm="ngForm" (ngSubmit)="addShow(addShowForm)">
      <div class="form-group">
        <label for="time">Time:</label>
        <input id="time" name="time" ngModel type="text" required class="form-control" />
      </div>
      <div class="form-group">
        <label for="movieId">Movie ID:</label>
        <input id="movieId" name="movieId" ngModel type="text" required class="form-control" />
      </div>
      <div class="form-group">
        <label for="theatreId">Theatre ID:</label>
        <input id="theatreId" name="theatreId" ngModel type="text" required class="form-control" />
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" (click)="modal.dismiss('cancel click')">Cancel</button>
        <button type="submit" class="btn btn-primary" [disabled]="!addShowForm.valid">Add Show</button>
      </div>
    </form>
  </div>
</ng-template>
```

### Summary
- The `deleteShow` method in `show.service.ts` now includes the parameters in the URL using `HttpParams`.
- The `deleteShow` method in `show.component.ts` is updated to call the service correctly.
- No changes are needed in the HTML template.

With these changes, the deletion should work correctly without encountering the 415 error.


-------------------------------------------------------------------------------------------------------------------------------------

Instead of Input type, I want a drop-down for all the Movies present in the show model and all the theatre Name in the show model.
You can suggest a different Task function with different query and make changes accordingly in the services and in component html and in component.ts etc.

Technology used is Angular and Core WEB API in .NET Core.

THIS IS COMPONENT HTML SNIPPET:
  <div class="search-container">
    <h2>Search Shows</h2>
    <form #searchForm="ngForm" (ngSubmit)="searchShows(searchForm)">
      <label for="movieId">Movie ID:</label>
      <input id="movieId" name="movieId" ngModel type="text" required />
      
      <label for="theatreId">Theatre ID:</label>
      <input id="theatreId" name="theatreId" ngModel type="text" required />
      
      <button type="submit" [disabled]="!searchForm.valid">Search</button>
    </form>
  </div>

--------------------

THIS IS COMPONENT.TS SNIPPET:
shows: any[] = [];
  selectedShow: any = {};

  constructor(private showService: ShowService, private modalService: NgbModal) {}

  ngOnInit(): void {}

  searchShows(searchForm: NgForm): void {
    const { movieId, theatreId } = searchForm.value;
    this.showService.getShowsbyMovieAndTheatre(movieId, theatreId).subscribe(
      (data) => {
        this.shows = data;
      },
      (error) => {
        console.error('Error fetching shows:', error);
      }
    );
  }

----------------------

export class ShowService {

  constructor(private http: HttpClient) { }
  apiUrl="https://localhost:44353/api/Show"

  getShowsbyMovieId(movieId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/movie/${movieId}`);
  }

  getShowsbyTheatreId(theatreId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/theatre/${theatreId}`);
  }

  getShowsbyMovieAndTheatre(movieId: number, theatreId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/movie/${movieId}/theatre/${theatreId}`);
  }

  getShowsbyTheatreNameAndMovieName(theatreName: string, movieName: string): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/theatre/${theatreName}/movie/${movieName}`);
  }

  //getTheatresbyCity service has to be imported in the show Component

  addShow(show: any): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}`, show);
  }
}

--------------------------------

        public async Task<List<ShowNames>> GetByMovieAndTheatre(int MovieId, int TheatreId)
        {
            //var sqlQuery = "SELECT * FROM Show where MovieId = @MovieId and TheatreId = @TheatreId";
            //return _db.Query<ShowNames>(sqlQuery, new { @MovieId = MovieId , @TheatreId = TheatreId }).ToList();

            var sqlQuery = @"SELECT S.Time, T.Name AS TheatreName, M.Name AS MovieName
                            FROM Show AS S
                            INNER JOIN Movie AS M ON S.MovieId = M.Id
                            INNER JOIN Theatre AS T ON S.TheatreId = T.Id
                            WHERE S.TheatreId = @TheatreId AND S.MovieId = @MovieId";

            var parameters = new { TheatreId = TheatreId, MovieId = MovieId };

            var result = _db.Query<ShowNames>(sqlQuery, parameters);
            return result.ToList();
        }

--------------------------------
bELOW ARE THE USED MODELS:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Book_My_Show_Entities
{
    public class ShowNames
    {
        public string? Time { get; set; }

        public string? TheatreName { get; set; }

        public string? MovieName { get; set; }
    }
}

------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace Book_My_Show_Entities
{
    public class Movie
    {
        [Key]
        public int? Id { get; set; }

        public string Name { get; set; }

        public decimal ImdbRating { get; set; }

        //[EnumDataType(typeof(MovieCategory))]
        public string Category { get; set; }

        
        //[EnumDataType(typeof(MovieGenre))]
        public string Genre { get; set; }

        
        public DateTime ReleaseDate { get; set; }

        public int Duration { get; set; }
        
        //public string? ActorName { get; set; }


        //public string? ActressName { get; set; }

        public string ThemePhotoPath { get; set; }
    }
}

---------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace Book_My_Show_Entities
{
    public class Theatre
    {
        [Key]
        public int Id { get; set; }

        [Required(ErrorMessage = "Name is mandatory")]
        public string Name { get; set; }

        [EnumDataType(typeof(City))]
        public string City { get; set; }

    }
}


