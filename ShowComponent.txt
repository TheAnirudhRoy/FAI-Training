Below is the DAL of Show Model.

using Book_My_Show_DAL.Interfaces;
using Book_My_Show_Entities;
using Dapper;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;

namespace Book_My_Show_DAL.Implementations
{
    public class ShowServices : IShowServices
    {
        private IDbConnection _db;
        private readonly DapperContext _dapperContext;

        public ShowServices(IConfiguration configuration,DapperContext dapperContext)
        {
            _db = new SqlConnection(configuration.GetConnectionString("DefaultConnection"));
            _dapperContext = dapperContext;
        }
        public void Add(Show show)
        {
            var sqlQuery = "INSERT INTO Show (Time,TheatreId,MovieId) VALUES (@Time,@TheatreId,@MovieId)";
            _db.Execute(sqlQuery, show);
        }

        public List<Movie> GetByMovieAndCity(string MovieName,string City)
        {
            var queryMovieName = (MovieName == "-1") ? null : MovieName;
            var queryCity = (City == "-1") ? null : City;
            var sqlQuery = "SELECT distinct m.Id,m.Name,m.ImdbRating,m.Category,m.Genre,m.ReleaseDate,m.ActorName,m.ActressName,m.ThemePhotoPath FROM ( Show s join Theatre t on s.TheatreId = t.Id ) join Movie m on m.Id = s.MovieId where ( @MovieName is null or m.Name like '%' + @MovieName + '%' ) and ( @City is null or t.City = @City ) ";
            return _db.Query<Movie>(sqlQuery, new { @MovieName = queryMovieName, @City = queryCity }).ToList();
        }

        public List<ShowMovieModel> GetShowByMovieAndCity(string MovieId, string City)
        {
            var queryCity = (City == "-1") ? null : City;
            var sqlQuery = "SELECT distinct s.Time,s.TheatreId,s.MovieId,t.Name FROM ( Show s join Theatre t on s.TheatreId = t.Id ) join Movie m on m.Id = s.MovieId where ( @MovieId is null or m.Id = @MovieId ) and ( @City is null or t.City = @City ) ";
            return _db.Query<ShowMovieModel>(sqlQuery, new { @MovieId = MovieId, @City = queryCity }).ToList();
        }

        public List<Show> GetByMovieAndTheatre(int MovieId, int TheatreId)
        {
            var sqlQuery = "SELECT * FROM Show where MovieId = @MovieId and TheatreId = @TheatreId";
            return _db.Query<Show>(sqlQuery, new { @MovieId = MovieId , @TheatreId = TheatreId }).ToList();
        }

        public List<Show> GetByMovieId(int Id)
        {
            var sqlQuery = "SELECT * FROM Show where MovieId = @MovieId";
            return _db.Query<Show>(sqlQuery, new { @MovieId = Id }).ToList();
        }

        public List<Show> GetByTheatreId(int Id)
        {
            var sqlQuery = "SELECT * FROM Show where TheatreId = @TheatreId";
            return _db.Query<Show>(sqlQuery, new { TheatreId = Id }).ToList();
        }

        //Have to create the stored Procedures for this
        public int Delete(Show show)
        {
            using (var connection = _dapperContext.CreateConnection())
            {
                var sqlQuery = "spc_deleteShow";

                var parameters = new DynamicParameters();
                parameters.Add("Time", show.Time, DbType.String);
                parameters.Add("TheatreId", show.TheatreId, DbType.Int32);
                parameters.Add("MovieId", show.MovieId, DbType.Int32);

                // Define the output parameter
                parameters.Add("Result", dbType: DbType.Int32, direction: ParameterDirection.Output);

                connection.Execute(sqlQuery, parameters, commandType: CommandType.StoredProcedure);

                // Retrieve the output value
                int result = parameters.Get<int>("Result");
                return result;
            }
               
        }

        public int Update(Show show)
        {
            var sqlQuery = "UPDATE Show SET Time = @Time where Time = @Time and TheatreId = @TheatreId and MovieId = @MovieId";
            var res = _db.Query<int>(sqlQuery);
            if (res != null)
            {
                return 1;
            }
            return 0;
        }
    }
}

Now below is the WEB API Controller of Show

using Book_My_Show_BL.Interfaces;
using Book_My_Show_Entities;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Book_My_Show.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ShowController : ControllerBase
    {

        private IShowServiceBL _showServices;

        public ShowController(IShowServiceBL showServices)
        {
            _showServices = showServices;
        }

        [HttpPost]
        public JsonResult Post(Show show)
        {
            _showServices.Add(show);
            return new JsonResult("Added Successfully");
        }

        [HttpGet("movie/{MovieId}")]
        public JsonResult GetyMovieId(int MovieId)
        {
            var show = _showServices.GetByMovieId(MovieId);
            return new JsonResult(show);
        }

        [HttpGet("theatre/{TheatreId}")]
        public JsonResult GetByTheatreId(int TheatreId)
        {
            var movie = _showServices.GetByMovieId(TheatreId);
            return new JsonResult(movie);
        }

        [HttpGet("movie/{MovieId}/theatre/{TheatreId}")]
        public JsonResult GetByMovieAndTheatre(int MovieId,int TheatreId)
        {
            var movie = _showServices.GetByMovieAndTheatre(MovieId,TheatreId);
            return new JsonResult(movie);
        }

        [HttpGet("movieName/{MovieName}/city/{City}")]
        public JsonResult GetByMovieAndCity(string MovieName,string City)
        {
            var movie = _showServices.GetByMovieAndCity(MovieName,City);
            return new JsonResult(movie);
        }

        [HttpGet("movie/{MovieId}/city/{City}")]
        public JsonResult GetShowByMovieAndCity(string MovieId, string City)
        {
            var movie = _showServices.GetShowByMovieAndCity(MovieId, City);
            return new JsonResult(movie);
        }

        [HttpPut]
        public JsonResult Put(Show show)
        {
            int res = _showServices.Update(show);
            if (res == 1)
                return new JsonResult("Updated Successfully");
            else
                return new JsonResult("Updation Unsuccessful");
        }

        [HttpDelete]
        public JsonResult Delete(Show show)
        {
            int res = _showServices.Delete(show);
            if (res == 1)
                return new JsonResult("Deleted Successfully");
            else
                return new JsonResult("Deletion Unsuccessful");
        }
    }
}

Now below is the Model of Show:

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;

namespace Book_My_Show_Entities
{
    public class Show
    {
        public string Time { get; set; }

        // Data annotation 
        [ForeignKeyAttribute("Theatre")]
        public int TheatreId { get; set; }

        [ForeignKeyAttribute("Movie")]
        public int MovieId { get; set; }
    }
}

I have provided the Show services DAL and Show WEP API Controller and Show Entity. 
Now here is the services provided in the ANGULAR,

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ShowService {

  constructor(private http: HttpClient) { }
  apiUrl="https://localhost:44353/api/Show"

  getShowsbyMovieId(movieId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/movie/${movieId}`);
  }

  getShowsbyTheatreId(theatreId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/theatre/${theatreId}`);
  }

  getShowsbyMovieAndTheatre(movieId: number, theatreId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/movie/${movieId}/theatre/${theatreId}`);
  }

  //getTheatresbyCity service has to be imported in the show Component

  addShow(show: any): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}`, show);
  }

  deleteShow(show: any): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}`, show);
  }
}

Create an ANGULAR Component for the above Show Model, There should be an Input type for MovieId and TheatreId, after the input, a Search button is pressed and after that all 
the LIST OF SHOWS are shown. 
Infront of every SHOW record Delete button functionality required, Add Show Button is also required and its functionality

------------------------------------------

Here's the Angular component for the `Show` model. This component will have input fields for `MovieId` and `TheatreId`, a search button to fetch the list of shows based on these inputs, and a delete button for each show record. Additionally, it includes functionality to add a new show.

First, ensure you have the necessary Angular service (`ShowService`) and other dependencies injected and ready.

### show.component.ts
```typescript
import { Component, OnInit } from '@angular/core';
import { ShowService } from '../services/show.service'; // Update the path as necessary
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-show',
  templateUrl: './show.component.html',
  styleUrls: ['./show.component.css']
})
export class ShowComponent implements OnInit {
  shows: any[] = [];
  showForm: FormGroup;
  addShowForm: FormGroup;
  
  constructor(private showService: ShowService, private fb: FormBuilder) {
    this.showForm = this.fb.group({
      movieId: ['', Validators.required],
      theatreId: ['', Validators.required]
    });

    this.addShowForm = this.fb.group({
      time: ['', Validators.required],
      movieId: ['', Validators.required],
      theatreId: ['', Validators.required]
    });
  }

  ngOnInit(): void {}

  searchShows(): void {
    const { movieId, theatreId } = this.showForm.value;
    this.showService.getShowsbyMovieAndTheatre(movieId, theatreId).subscribe(
      (data) => {
        this.shows = data;
      },
      (error) => {
        console.error('Error fetching shows:', error);
      }
    );
  }

  deleteShow(show: any): void {
    this.showService.deleteShow(show).subscribe(
      (result) => {
        console.log(result);
        this.searchShows(); // Refresh the list after deletion
      },
      (error) => {
        console.error('Error deleting show:', error);
      }
    );
  }

  addShow(): void {
    const newShow = this.addShowForm.value;
    this.showService.addShow(newShow).subscribe(
      (result) => {
        console.log(result);
        this.searchShows(); // Refresh the list after adding
      },
      (error) => {
        console.error('Error adding show:', error);
      }
    );
  }
}
```

### show.component.html
```html
<div class="search-container">
  <h2>Search Shows</h2>
  <form [formGroup]="showForm" (ngSubmit)="searchShows()">
    <label for="movieId">Movie ID:</label>
    <input id="movieId" formControlName="movieId" type="text" />
    
    <label for="theatreId">Theatre ID:</label>
    <input id="theatreId" formControlName="theatreId" type="text" />
    
    <button type="submit" [disabled]="showForm.invalid">Search</button>
  </form>
</div>

<div class="add-show-container">
  <h2>Add Show</h2>
  <form [formGroup]="addShowForm" (ngSubmit)="addShow()">
    <label for="time">Time:</label>
    <input id="time" formControlName="time" type="text" />
    
    <label for="addMovieId">Movie ID:</label>
    <input id="addMovieId" formControlName="movieId" type="text" />
    
    <label for="addTheatreId">Theatre ID:</label>
    <input id="addTheatreId" formControlName="theatreId" type="text" />
    
    <button type="submit" [disabled]="addShowForm.invalid">Add Show</button>
  </form>
</div>

<div class="show-list-container">
  <h2>List of Shows</h2>
  <ul>
    <li *ngFor="let show of shows">
      Time: {{ show.time }}, Movie ID: {{ show.movieId }}, Theatre ID: {{ show.theatreId }}
      <button (click)="deleteShow(show)">Delete</button>
    </li>
  </ul>
</div>
```

### show.component.css
```css
.search-container, .add-show-container, .show-list-container {
  margin-bottom: 20px;
}

label {
  display: block;
  margin: 5px 0;
}

input {
  margin-bottom: 10px;
}

button {
  margin-top: 10px;
}

ul {
  list-style-type: none;
}

li {
  margin-bottom: 10px;
}
```

### show.service.ts
Ensure your service is correctly defined and imported as shown in the original code snippet:

```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ShowService {
  constructor(private http: HttpClient) {}

  apiUrl = `${environment.apiUrl}/Show`;

  getShowsbyMovieId(movieId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/movie/${movieId}`);
  }

  getShowsbyTheatreId(theatreId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/theatre/${theatreId}`);
  }

  getShowsbyMovieAndTheatre(movieId: number, theatreId: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/movie/${movieId}/theatre/${theatreId}`);
  }

  addShow(show: any): Observable<any> {
    return this.http.post<any>(`${this.apiUrl}`, show);
  }

  deleteShow(show: any): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}`, { body: show });
  }
}
```

### app.module.ts
Make sure to import `ReactiveFormsModule` and register your component and service in the app module:

```typescript
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { ReactiveFormsModule } from '@angular/forms';

import { AppComponent } from './app.component';
import { ShowComponent } from './show/show.component';
import { ShowService } from './services/show.service'; // Update the path as necessary

@NgModule({
  declarations: [
    AppComponent,
    ShowComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    ReactiveFormsModule
  ],
  providers: [ShowService],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

With this setup, your Angular component will be able to search for shows based on `MovieId` and `TheatreId`, add new shows, and delete existing ones.

-----------------------------------------

Sure, here's the updated Angular component using `NgForm` and `NgbModal` for handling forms and modals.

### show.component.ts
```typescript
import { Component, OnInit } from '@angular/core';
import { ShowService } from '../services/show.service'; // Update the path as necessary
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-show',
  templateUrl: './show.component.html',
  styleUrls: ['./show.component.css']
})
export class ShowComponent implements OnInit {
  shows: any[] = [];
  selectedShow: any = {};

  constructor(private showService: ShowService, private modalService: NgbModal) {}

  ngOnInit(): void {}

  searchShows(searchForm: NgForm): void {
    const { movieId, theatreId } = searchForm.value;
    this.showService.getShowsbyMovieAndTheatre(movieId, theatreId).subscribe(
      (data) => {
        this.shows = data;
      },
      (error) => {
        console.error('Error fetching shows:', error);
      }
    );
  }

  deleteShow(show: any): void {
    this.showService.deleteShow(show).subscribe(
      (result) => {
        console.log(result);
        this.searchShows({ value: { movieId: show.movieId, theatreId: show.theatreId } } as NgForm); // Refresh the list after deletion
      },
      (error) => {
        console.error('Error deleting show:', error);
      }
    );
  }

  openAddShowModal(content: any): void {
    this.selectedShow = {};
    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });
  }

  addShow(addShowForm: NgForm): void {
    const newShow = addShowForm.value;
    this.showService.addShow(newShow).subscribe(
      (result) => {
        console.log(result);
        this.modalService.dismissAll();
        this.searchShows({ value: { movieId: newShow.movieId, theatreId: newShow.theatreId } } as NgForm); // Refresh the list after adding
      },
      (error) => {
        console.error('Error adding show:', error);
      }
    );
  }
}
```

### show.component.html
```html
<div class="search-container">
  <h2>Search Shows</h2>
  <form #searchForm="ngForm" (ngSubmit)="searchShows(searchForm)">
    <label for="movieId">Movie ID:</label>
    <input id="movieId" name="movieId" ngModel type="text" required />
    
    <label for="theatreId">Theatre ID:</label>
    <input id="theatreId" name="theatreId" ngModel type="text" required />
    
    <button type="submit" [disabled]="!searchForm.valid">Search</button>
  </form>
</div>

<div class="add-show-container">
  <button (click)="openAddShowModal(addShowModal)">Add Show</button>
</div>

<div class="show-list-container">
  <h2>List of Shows</h2>
  <ul>
    <li *ngFor="let show of shows">
      Time: {{ show.time }}, Movie ID: {{ show.movieId }}, Theatre ID: {{ show.theatreId }}
      <button (click)="deleteShow(show)">Delete</button>
    </li>
  </ul>
</div>

<ng-template #addShowModal let-modal>
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Add Show</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="modal.dismiss('Cross click')"></button>
  </div>
  <div class="modal-body">
    <form #addShowForm="ngForm" (ngSubmit)="addShow(addShowForm)">
      <div class="form-group">
        <label for="time">Time:</label>
        <input id="time" name="time" ngModel type="text" required class="form-control" />
      </div>
      <div class="form-group">
        <label for="movieId">Movie ID:</label>
        <input id="movieId" name="movieId" ngModel type="text" required class="form-control" />
      </div>
      <div class="form-group">
        <label for="theatreId">Theatre ID:</label>
        <input id="theatreId" name="theatreId" ngModel type="text" required class="form-control" />
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" (click)="modal.dismiss('cancel click')">Cancel</button>
        <button type="submit" class="btn btn-primary" [disabled]="!addShowForm.valid">Add Show</button>
      </div>
    </form>
  </div>
</ng-template>
```

### show.component.css
```css
.search-container, .add-show-container, .show-list-container {
  margin-bottom: 20px;
}

label {
  display: block;
  margin: 5px 0;
}

input {
  margin-bottom: 10px;
}

button {
  margin-top: 10px;
}

ul {
  list-style-type: none;
}

li {
  margin-bottom: 10px;
}

.modal-header, .modal-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
```

### app.module.ts
Ensure you import the necessary modules and register your component and service in the app module:

```typescript
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';

import { AppComponent } from './app.component';
import { ShowComponent } from './show/show.component';
import { ShowService } from './services/show.service'; // Update the path as necessary

@NgModule({
  declarations: [
    AppComponent,
    ShowComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    FormsModule,
    NgbModule
  ],
  providers: [ShowService],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

### Dependencies
Make sure you have `ng-bootstrap` installed. You can install it using the following command:

```sh
ng add @ng-bootstrap/ng-bootstrap
```

This setup will allow you to search for shows based on `MovieId` and `TheatreId`, add new shows using a modal form, and delete existing shows.